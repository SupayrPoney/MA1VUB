Object subclass: #City	instanceVariableNames: 'name population'	classVariableNames: ''	poolDictionaries: ''	category: 'Assignement'!!City methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 11:17'!getAttacked: aCombatDevice 	population := (population-200) max:0.! !!City methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 11:19'!initializeWithName: aString andPop: anInteger	self initialize.	name := aString.	population := anInteger.! !!City methodsFor: 'accessing' stamp: 'BrunoPereira 12/12/2015 15:01'!name1	^ name! !!City methodsFor: 'accessing' stamp: 'BrunoPereira 1/10/2016 11:18'!population	^ population! !!City methodsFor: 'accessing' stamp: 'BrunoPereira 12/12/2015 15:01'!name: anObject	name := anObject! !!City methodsFor: 'accessing' stamp: 'BrunoPereira 1/10/2016 11:18'!population: anObject	population := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!City class	instanceVariableNames: ''!!City class methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 11:20'!initializeWithName: aString andPop: anInteger	^ self new initializeWithName: aString andPop: anInteger.! !Object subclass: #CombatDevice	instanceVariableNames: 'manufacturer weight pursuitPoints damagePoints'	classVariableNames: ''	poolDictionaries: ''	category: 'Assignement'!!CombatDevice methodsFor: 'accessing' stamp: 'BrunoPereira 12/12/2015 15:10'!pursuitPoints: anObject	pursuitPoints := anObject! !!CombatDevice methodsFor: 'accessing' stamp: 'BrunoPereira 12/12/2015 15:10'!manufacturer: anObject	manufacturer := anObject! !!CombatDevice methodsFor: 'accessing' stamp: 'BrunoPereira 12/12/2015 15:10'!weight: anObject	weight := anObject! !!CombatDevice methodsFor: 'accessing' stamp: 'BrunoPereira 12/12/2015 15:10'!weight	^ weight! !!CombatDevice methodsFor: 'accessing' stamp: 'BrunoPereira 12/12/2015 15:10'!damagePoints	^ damagePoints! !!CombatDevice methodsFor: 'accessing' stamp: 'BrunoPereira 12/12/2015 15:10'!damagePoints: anObject	damagePoints := anObject! !!CombatDevice methodsFor: 'accessing' stamp: 'BrunoPereira 12/12/2015 15:10'!pursuitPoints	^ pursuitPoints! !!CombatDevice methodsFor: 'accessing' stamp: 'BrunoPereira 12/12/2015 15:10'!manufacturer	^ manufacturer! !!CombatDevice methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/9/2016 18:38'!initializeWith: aManufacturer	manufacturer := aManufacturer.	self initialize.! !!CombatDevice methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 02:32'!initializeWith: aManufacturer withWeigth: aWeight	manufacturer := aManufacturer.	weight := aWeight.	self initialize.! !!CombatDevice methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/9/2016 19:04'!initializeWith: aManufacturer andPursuitPoints: pursPoints 	manufacturer := aManufacturer.	pursuitPoints := pursPoints.	self initialize.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CombatDevice class	instanceVariableNames: ''!!CombatDevice class methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/9/2016 18:38'!initializeWith: aManufacturer	^ self new initializeWith: aManufacturer.! !!CombatDevice class methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 02:32'!initializeWith: aManufacturer withWeigth: aWeight	^ self new initializeWith: aManufacturer withWeigth: aWeight .! !!CombatDevice class methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/9/2016 19:05'!initializeWith: aManufacturer andPursuitPoints: pursPoints 	^ self new initializeWith: aManufacturer andPursuitPoints: pursPoints .! !Object subclass: #CrewMember	instanceVariableNames: 'age trainer specialisations assignedSubsystem'	classVariableNames: ''	poolDictionaries: ''	category: 'Assignement'!!CrewMember methodsFor: 'as yet unclassified' stamp: 'BrunoRochaPereira 12/13/2015 18:22'!initializeWith: anAge	age := anAge.	self initialize.! !!CrewMember methodsFor: 'as yet unclassified' stamp: 'BrunoRochaPereira 12/21/2015 22:34'!initialize	specialisation := OrderedCollection new.	super initialize! !!CrewMember methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/11/2016 03:59'!addToSubSystems: aSubsystemCollection 	aSubsystemCollection do: [:each| (self canHandle:each) ifTrue: [each addOperator:self. ^true ]].	^false.! !!CrewMember methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 20:42'!canHandle: aSubsystem 	^ trainer == (aSubsystem manufacturer ).! !!CrewMember methodsFor: 'as yet unclassified' stamp: 'BrunoRochaPereira 12/21/2015 22:33'!addCapacity: aSubsystem 	specialisation add: (aSubsystem type).! !!CrewMember methodsFor: 'accessing' stamp: 'BrunoRochaPereira 12/12/2015 16:23'!assignedSubsystem	^ assignedSubsystem! !!CrewMember methodsFor: 'accessing' stamp: 'BrunoRochaPereira 12/12/2015 16:23'!trainer	^ trainer! !!CrewMember methodsFor: 'accessing' stamp: 'BrunoRochaPereira 12/12/2015 16:23'!age	^ age! !!CrewMember methodsFor: 'accessing' stamp: 'BrunoRochaPereira 12/12/2015 16:23'!assignedSubsystem: anObject	assignedSubsystem := anObject! !!CrewMember methodsFor: 'accessing' stamp: 'BrunoRochaPereira 12/21/2015 22:35'!specialisations: anObject	specialisation := anObject! !!CrewMember methodsFor: 'accessing' stamp: 'BrunoRochaPereira 12/21/2015 22:35'!specialisations	^ specialisation! !!CrewMember methodsFor: 'accessing' stamp: 'BrunoRochaPereira 12/12/2015 16:23'!trainer: anObject	trainer := anObject! !!CrewMember methodsFor: 'accessing' stamp: 'BrunoRochaPereira 12/12/2015 16:23'!age: anObject	age := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CrewMember class	instanceVariableNames: ''!!CrewMember class methodsFor: 'as yet unclassified' stamp: 'BrunoRochaPereira 12/13/2015 17:08'!initializeWith: anAge	^ self new initializeWith: anAge.! !CrewMember subclass: #Captain	instanceVariableNames: 'ship'	classVariableNames: ''	poolDictionaries: ''	category: 'Assignement'!!Captain methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/9/2016 23:20'!informOfCriticalDamage	ship setCriticalState.! !!Captain methodsFor: 'accessing' stamp: 'BrunoPereira 1/9/2016 22:52'!ship	^ ship! !!Captain methodsFor: 'accessing' stamp: 'BrunoPereira 1/9/2016 22:52'!ship: anObject	ship := anObject! !CombatDevice subclass: #Faiser	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Assignement'!!Faiser methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 02:15'!initialize	super initialize.	self pursuitPoints: 0.	self damagePoints: 230.	! !Object subclass: #Maneuver	instanceVariableNames: 'manufacturers'	classVariableNames: ''	poolDictionaries: ''	category: 'Assignement'!!Maneuver methodsFor: 'accessing' stamp: 'BrunoPereira 1/9/2016 19:16'!manufacturers: anObject	manufacturer := anObject! !!Maneuver methodsFor: 'accessing' stamp: 'BrunoPereira 1/9/2016 20:04'!initialize	super initialize.	manufacturers := Dictionary new.	! !!Maneuver methodsFor: 'accessing' stamp: 'BrunoPereira 1/9/2016 19:16'!manufacturers	^ manufacturer! !!Maneuver methodsFor: 'accessing' stamp: 'BrunoPereira 1/9/2016 20:25'!addManufacturer: aManufacturer withaffectiveness: anAffectiveness	manufacturers at: aManufacturer put: anAffectiveness! !!Maneuver methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/9/2016 20:01'!canAvoid: aCombatDevice	| cbtDeviceManufacturer affectiveness |	cbtDeviceManufacturer := aCombatDevice manufacturer.	affectiveness := (manufacturers at:cbtDeviceManufacturer ifPresent: [ manufacturers at:cbtDeviceManufacturer ] ifAbsent: [-1]).	^ (aCombatDevice pursuitPoints) < affectiveness.! !CombatDevice subclass: #NeutrinoTorpedo	instanceVariableNames: 'plus'	classVariableNames: ''	poolDictionaries: ''	category: 'Assignement'!!NeutrinoTorpedo methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 03:00'!initializeWithPlus: aPlus  madeBy: aManufacturer withWeigth: aWeight	super initializeWith: aManufacturer withWeigth: aWeight.	plus := aPlus.	pursuitPoints:= (self class adaptability + aPlus).	damagePoints:= 15 * weight + (self class minDamage).! !!NeutrinoTorpedo methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 02:43'!initialize	super initialize.	pursuitPoints:= 0.	damagePoints:= 230.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NeutrinoTorpedo class	instanceVariableNames: 'adaptability minDamage'!!NeutrinoTorpedo class methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 02:51'!initializeWithPlus: aPlus  madeBy: aManufacturer withWeigth: aWeight    ^ self new initializeWithPlus: aPlus  madeBy: aManufacturer withWeigth: aWeight.! !!NeutrinoTorpedo class methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 02:52'!setMinDamage: aMinDamage andAdaptability: anAmount	minDamage :=aMinDamage.	adaptability := anAmount.! !!NeutrinoTorpedo class methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 02:58'!initializeWithMinDamage: aMinDamage andAdaptability: anAdaptability.	super initialize.	adaptability := anAdaptability.	minDamage := aMinDamage.! !!NeutrinoTorpedo class methodsFor: 'accessing' stamp: 'BrunoPereira 1/10/2016 03:00'!minDamage	^ minDamage! !!NeutrinoTorpedo class methodsFor: 'accessing' stamp: 'BrunoPereira 1/10/2016 03:00'!adaptability	^ adaptability! !!NeutrinoTorpedo class methodsFor: 'accessing' stamp: 'BrunoPereira 1/10/2016 03:00'!minDamage: anObject	minDamage := anObject! !!NeutrinoTorpedo class methodsFor: 'accessing' stamp: 'BrunoPereira 1/10/2016 03:00'!adaptability: anObject	adaptability := anObject! !CombatDevice subclass: #PhotonTorpedo	instanceVariableNames: 'photonsNumber maxDegree'	classVariableNames: ''	poolDictionaries: ''	category: 'Assignement'!!PhotonTorpedo methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 02:43'!initializeWithPhotons: aPhotonsNumber at: aMaxDegree madeBy: aManufacturer withWeigth: aWeight	super initializeWith: aManufacturer withWeigth: aWeight.	photonsNumber := aPhotonsNumber.	maxDegree := aMaxDegree.	pursuitPoints:= (weight * maxDegree).	damagePoints:= photonsNumber.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PhotonTorpedo class	instanceVariableNames: ''!!PhotonTorpedo class methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 02:31'!initializeWithPhotons: aPhotonsNumber at: aMaxDegree madeBy: aManufacturer withWeigth: aWeight	^ self new initializeWithPhotons: aPhotonsNumber at: aMaxDegree madeBy: aManufacturer withWeigth: aWeight.! !Object subclass: #Ship	instanceVariableNames: 'subsystems shield combatDevices crewMembers captain maneuvers minimalrobustness'	classVariableNames: ''	poolDictionaries: ''	category: 'Assignement'!!Ship methodsFor: 'accessing' stamp: 'BrunoPereira 1/9/2016 23:11'!maneuvers: anObject	maneuvers := anObject! !!Ship methodsFor: 'accessing' stamp: 'BrunoRochaPereira 12/13/2015 18:07'!shield	^ shield! !!Ship methodsFor: 'accessing' stamp: 'BrunoPereira 1/11/2016 04:21'!getCrewMembers	| crewMembersList operatorsList |	operatorsList :=(subsystems collect: [ :each | each operators]).	crewMembersList := crewMembers copy.	operatorsList do:[:each | (each isEmpty) ifFalse:[each do: [:each2 | crewMembersList add:each2]]].	^ crewMembersList! !!Ship methodsFor: 'accessing' stamp: 'BrunoPereira 1/9/2016 23:11'!combatDevices: anObject	combatDevices := anObject! !!Ship methodsFor: 'accessing' stamp: 'BrunoPereira 1/9/2016 23:11'!maneuvers	^ maneuvers! !!Ship methodsFor: 'accessing' stamp: 'BrunoPereira 1/9/2016 23:11'!crewMembers: anObject	crewMembers := anObject! !!Ship methodsFor: 'accessing' stamp: 'BrunoPereira 1/9/2016 23:11'!combatDevices	^ combatDevices! !!Ship methodsFor: 'accessing' stamp: 'BrunoRochaPereira 12/13/2015 18:07'!shield: anObject	shield := anObject! !!Ship methodsFor: 'accessing' stamp: 'BrunoPereira 1/9/2016 23:11'!captain	^ captain! !!Ship methodsFor: 'accessing' stamp: 'BrunoPereira 1/9/2016 23:11'!minimalrobustness	^ minimalrobustness! !!Ship methodsFor: 'accessing' stamp: 'BrunoPereira 1/9/2016 23:11'!minimalrobustness: anObject	minimalrobustness := anObject! !!Ship methodsFor: 'accessing' stamp: 'BrunoRochaPereira 12/13/2015 17:36'!subsystems: anObject	subsystems := anObject! !!Ship methodsFor: 'accessing' stamp: 'BrunoPereira 1/10/2016 18:26'!crewMembers	| crewMembersList operatorsList |	operatorsList :=(subsystems collect: [ :each | each operators]).	crewMembersList := crewMembers copy.	operatorsList do:[:each | (each isEmpty) ifFalse:[each do: [:each2 | crewMembersList add:each2]]].	^ crewMembersList! !!Ship methodsFor: 'accessing' stamp: 'BrunoRochaPereira 12/13/2015 17:36'!subsystems	^ subsystems! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 20:33'!hasNoPoorlyAssigned	subsystems do:[:each | (each operators) do: [:each2 | (each2 canHandle: each) ifFalse:[^ false]]].	^ true.! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoRochaPereira 12/21/2015 16:11'!addMember: aCrewMember 	crewMembers add: aCrewMember .! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 00:21'!receiveDamage: damageAmount 	self shield: (shield - damageAmount).	(shield < 20) ifTrue: [captain informOfCriticalDamage].! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/9/2016 23:21'!setCriticalState	(self getRobustness < minimalrobustness ) ifTrue: self evacuate! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoRochaPereira 12/13/2015 15:37'!add: aSubsystem 	subsystems add: aSubsystem.! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoRochaPereira 12/13/2015 18:40'!addCombatDevice: aCombatDevice 	combatDevices add: aCombatDevice.! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 18:36'!isLazy	| operators workersNumber operatorsList |	operatorsList := (subsystems collect: [ :each | each operators]).	operators := OrderedCollection new.	operators do:[:each | (each isEmpty) ifFalse:[each do: [:each2 | operators add:each2]]].	workersNumber := (operators size).	^ (workersNumber < ((crewMembers) size - workersNumber)).! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/9/2016 20:04'!initialize	super initialize.	subsystems :=OrderedCollection new.	combatDevices  :=OrderedCollection new.	crewMembers :=OrderedCollection new.	maneuvers :=OrderedCollection new.	shield := 100.! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoRochaPereira 12/21/2015 16:41'!requiresNoHeroicAction	^ self getRobustness >= 5.! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 11:11'!attack: aDefender	aDefender getAttacked:  (self getBestCombatDevice).! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 11:33'!getAttacked: aCombatDevice 	(self canAvoid: aCombatDevice ) ifFalse: [shield := (shield - ((aCombatDevice damagePoints)//15)) max:0 ].! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/9/2016 23:24'!addCaptain: aCaptain 	aCaptain ship:self.	captain := aCaptain .! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoRochaPereira 12/13/2015 19:19'!getRobustness	| devicesAmount percWorkingSubs |	devicesAmount := (combatDevices size).	percWorkingSubs := 100.0 * (self getWorkingSubsystemsAmount) / ((subsystems size) max: 1.0).	^ (shield + devicesAmount + percWorkingSubs)/3.0.! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoRochaPereira 12/13/2015 15:59'!getNonWorkingSubsystemsAmount	^ (subsystems select: [ :each |  (each isWorking) not]) size.! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/9/2016 23:25'!evacuate	crewMembers removeAll.	(self requiresNoHeroicAction) ifTrue: [ captain ship: nil. captain :=nil.  ] .! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 12:11'!getOldestMembers	| operators  oldestOperatorsList |	operators :=(subsystems collect: [ :each | each operators]).	oldestOperatorsList := operators collect: [ :each | (each isEmpty) ifTrue: [nil] ifFalse:[(each sorted:[:el1 :el2 | el1 age > el2 age]) at:1] ].	^ oldestOperatorsList.	! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 12:54'!getUnassignedNumber	self shouldBeImplemented.! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/11/2016 04:22'!getCrewCount	^ ((self getCrewMembers) size + (captain isNil ifTrue: [ 0 ] ifFalse: [ 1 ] )).! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/9/2016 21:57'!canAvoid: aCombatDevice 	^ ((maneuvers select: [:each | each canAvoid: aCombatDevice]) notEmpty ).! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 20:45'!isWellOrganized	^ (self getWorkingSubsystemsAmount == (subsystems size)) and: (self hasNoPoorlyAssigned).! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/11/2016 03:52'!addCrewMembersGroup: aCrewMembersGroup 	aCrewMembersGroup do: [:each | (each addToSubSystems:subsystems ) ifFalse: [self addMember: each]].! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/11/2016 00:15'!getBestCombatDevice	^ (combatDevices isNil) ifTrue: [nil] ifFalse: [(combatDevices sorted: [ :each :each2 | each damagePoints > each2 damagePoints ]) at:1].! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/9/2016 19:06'!addManeuver: aManeuver 	maneuvers add: aManeuver.! !!Ship methodsFor: 'as yet unclassified' stamp: 'BrunoRochaPereira 12/13/2015 15:46'!getWorkingSubsystemsAmount	^ (subsystems select: [ :each | each isWorking ]) size.! !Object subclass: #Subsystem	instanceVariableNames: 'manufacturer operators minOperators type'	classVariableNames: ''	poolDictionaries: ''	category: 'Assignement'!!Subsystem methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 21:48'!isWorking	^ ((operators size) > minOperators) .! !!Subsystem methodsFor: 'as yet unclassified' stamp: 'BrunoRochaPereira 12/13/2015 15:53'!initialize	operators :=OrderedCollection new.	minOperators := 0.! !!Subsystem methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 12:51'!addOperator: aCrewMember 	operators add: aCrewMember.	aCrewMember assignedSubsystem: self.! !!Subsystem methodsFor: 'accessing' stamp: 'BrunoRochaPereira 12/21/2015 22:25'!type	^ type! !!Subsystem methodsFor: 'accessing' stamp: 'BrunoRochaPereira 12/12/2015 16:31'!manufacturer: anObject	manufacturer := anObject! !!Subsystem methodsFor: 'accessing' stamp: 'BrunoRochaPereira 12/21/2015 22:25'!type: anObject	type := anObject! !!Subsystem methodsFor: 'accessing' stamp: 'BrunoRochaPereira 12/12/2015 16:31'!minOperators: anObject	minOperators := anObject! !!Subsystem methodsFor: 'accessing' stamp: 'BrunoRochaPereira 12/12/2015 16:31'!minOperators	^ minOperators! !!Subsystem methodsFor: 'accessing' stamp: 'BrunoRochaPereira 12/12/2015 16:31'!operators: anObject	operators := anObject! !!Subsystem methodsFor: 'accessing' stamp: 'BrunoRochaPereira 12/12/2015 16:31'!manufacturer	^ manufacturer! !!Subsystem methodsFor: 'accessing' stamp: 'BrunoRochaPereira 12/12/2015 16:31'!operators	^ operators! !TestCase subclass: #TestManeuver	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Assignement'!!TestManeuver methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/9/2016 20:57'!testAvoid	| ship man cbtDev |	ship := Ship new.	cbtDev := Faiser initializeWith: 'Omega' andPursuitPoints: 50.	man := Maneuver new.	man addManufacturer: 'Omega' withaffectiveness: 60.	ship addManeuver: man.	self assert: (man canAvoid: cbtDev) == true.	self assert: (ship canAvoid: cbtDev) == true.! !TestCase subclass: #TestShip	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Assignement'!!TestShip methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 21:48'!testWellOrganized	|        testShip subs1  cmember1 |	testShip := Ship new.	subs1 := Subsystem new.	subs1 minOperators: 0.	subs1 manufacturer: 'Othello'.	cmember1 := CrewMember initializeWith: 22.	cmember1 trainer: 'Othello'.	subs1 addOperator: cmember1.	testShip add: subs1.	testShip isWellOrganized.	self assert: (testShip isWellOrganized) = true. ! !!TestShip methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 21:37'!testNonworkingSubs	| testShip sub1 sub2 |	testShip := Ship new.	sub1 := Subsystem new.	sub1 minOperators: 1.	sub2 := Subsystem new.	sub2 minOperators: 1.	testShip add: sub1.	testShip add: sub2.	testShip getNonWorkingSubsystemsAmount.	self assert: (testShip getNonWorkingSubsystemsAmount)=2.! !!TestShip methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 21:41'!testRobustness	| testShip subs1 subs2 dev1 cm expectedValue |	testShip := Ship new.	subs1 := Subsystem new.	subs2 := Subsystem new.	dev1 := CombatDevice new.	cm := CrewMember new.	subs1 addOperator: cm.	testShip add: subs1.	testShip add: subs2.	testShip addCombatDevice: dev1.	expectedValue :=(100.0+1.0+50.0)/3.0.	testShip getRobustness.	self assert: (testShip getRobustness) = expectedValue. "50% of subsystems working, new ship, 1 combat device"! !!TestShip methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/9/2016 23:35'!testCriticalState	| s pi cpt |	s := Ship new.	s minimalrobustness: 50.	pi := CrewMember new.	cpt := Captain new.	s addCaptain: cpt.	s addMember: pi.	self assert: (s getCrewCount) = 2.	cpt informOfCriticalDamage.	self assert: (s getCrewCount) = 0.! !!TestShip methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 01:19'!testImpact	| ship cpt |	ship := Ship new.	cpt := Captain new.	ship minimalrobustness: 50.	ship addCaptain: cpt.	ship receiveDamage: 90.	self assert: (ship getCrewCount) = 1.	! !!TestShip methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 12:10'!testOldestMembers	| testShip subs1 subs2 cmember1 oldestMembers cmember2 cmember3 |	testShip := Ship new.	subs1 := Subsystem new.	subs2 := Subsystem new.	cmember1 := CrewMember initializeWith: 22.	cmember2 := CrewMember initializeWith: 21.	cmember3 := CrewMember initializeWith: 14.	subs1 addOperator: cmember1.	subs1 addOperator: cmember2.	subs2 addOperator: cmember3.	testShip add: subs1.	testShip add: subs2.	oldestMembers := OrderedCollection new.	oldestMembers add: cmember1.	oldestMembers add: cmember3.	Transcript show:(testShip getOldestMembers at:1) age.	self assert: (testShip getOldestMembers) = oldestMembers .! !!TestShip methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/10/2016 18:36'!testLazy	| testShip subs1 subs2 cmember1  cmember2 cmember3 cmember4 cmember5 cmember6 |	testShip := Ship new.	subs1 := Subsystem new.	subs2 := Subsystem new.	cmember1 := CrewMember initializeWith: 22.	cmember2 := CrewMember initializeWith: 21.	cmember3 := CrewMember initializeWith: 14.	cmember4 := CrewMember initializeWith: 22.	cmember5 := CrewMember initializeWith: 21.	cmember6 := CrewMember initializeWith: 21.	subs1 addOperator: cmember1.	subs2 addOperator: cmember3.	testShip add: subs1.	testShip add: subs2.	self assert: (testShip isLazy) = false. 	testShip addMember: cmember4.	testShip addMember: cmember5.	testShip addMember: cmember6.	testShip crewMembers .	testShip isLazy.	self assert: (testShip isLazy) = true. ! !!TestShip methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/11/2016 04:17'!testIncorporation	| testShip subs1 subs2 dev1 cm1 group cm2 cm3 subs3 cpt |	testShip := Ship new.	group := OrderedCollection new.	subs1 := Subsystem new.	subs1 manufacturer: 'Othello'.	subs2 := Subsystem new.	subs3 := Subsystem new.	dev1 := CombatDevice new.	cpt := Captain new.	cm1 := CrewMember new.	cm1 trainer: 'Othello'.	cm2 := CrewMember new.	cm3 := CrewMember new.	testShip addCaptain: cpt.	testShip add: subs1.	testShip add: subs2.	testShip add: subs3.	group add: cm1.	group add: cm2.	group add: cm3.	testShip addCrewMembersGroup: group.	testShip getCrewCount.	self assert: (testShip getCrewCount) = 4.	self assert: (testShip getNonWorkingSubsystemsAmount ) = 1.! !!TestShip methodsFor: 'as yet unclassified' stamp: 'BrunoRochaPereira 12/21/2015 16:27'!testEvacuation	| testShip cpt cm  |	testShip := Ship new.	cm := CrewMember new.	cpt := Captain new.	testShip addCaptain: cpt.	testShip addMember: cm.	testShip evacuate.	self assert: (testShip getCrewCount) = 0. "50% of subsystems working, new ship, 1 combat device"! !!TestShip methodsFor: 'as yet unclassified' stamp: 'BrunoPereira 1/11/2016 00:16'!testAttack	| ship faiser neutrino photon ship2 city city2 |	ship := Ship new.	faiser := Faiser new.	NeutrinoTorpedo initializeWithMinDamage: 20 andAdaptability: 20.	neutrino := NeutrinoTorpedo initializeWithPlus: 20  madeBy: 'Abc' withWeigth: 6.	photon := PhotonTorpedo initializeWithPhotons: 150 at: 60 madeBy: 'Othello' withWeigth: 60.	ship addCombatDevice: faiser.	ship addCombatDevice: neutrino.	ship addCombatDevice: photon.	ship2 := Ship new.	ship attack: ship2.	city := City initializeWithName: 'Stockolm' andPop: 600.	city2 := City initializeWithName: 'Faro' andPop: 100.	ship attack: city.	ship attack: city2.	self assert:(ship2 shield)=85.	self assert:(city population) = 400.	self assert:(city2 population) = 0.! !